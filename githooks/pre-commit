#!/bin/sh

# Get the list of changed Go files.
STAGED_GO_FILES=$(git diff --cached --name-only | grep "\.go$")

# We can exit if there are none.
if [[ "$STAGED_GO_FILES" = "" ]]; then
  exit 0
fi

# Check for golangci-lint.
if [[ ! -x "$(command -v golangci-lint)" ]]; then
  printf "\t\033[41mPlease install golangci-lint\033[0m (https://github.com/golangci/golangci-lint)"
  exit 1
fi

# Check for goimports.
if [[ ! -x "$(command -v goimports)" ]]; then
  printf "\t\033[41mPlease install goimports\033[0m (go get golang.org/x/tools/cmd/goimports)"
  exit 1
fi

# Make sure the code compiles.
GO111MODULE=on go build -o /dev/null ./...
if [[ $? != 0 ]]; then
	echo "\t\033[31mgo build\033[0m \033[0;30m\033[41mFAILURE!\033[0m\n"
	exit 1
fi

# Make sure the unit tests pass.
GO111MODULE=on go test -v ./...
if [[ $? != 0 ]]; then
	echo "\t\033[31mgo test\033[0m \033[0;30m\033[41mFAILURE!\033[0m\n"
	exit 1
fi

PASS=true

for FILE in $STAGED_GO_FILES
do
  # Run goimports on the staged file.
  goimports -w $FILE

  # Run golangci-lint on the staged files and check the exit status
  golangci-lint run $FILE
  if [[ $? == 1 ]]; then
    printf "\t\033[31mgolangci-lint\033[0m \033[0;30m\033[41mFAILURE!\033[0m\n"
    PASS=false
  else
    printf "\t\033[32mgolangci-lint\033[0m \033[0;30m\033[42mpass\033[0m\n"
  fi
done

# Print commitstatus
if ! $PASS; then
  printf "\033[0;30m\033[41mCOMMIT FAILED\033[0m\n"
  exit 1
else
  printf "\033[0;30m\033[42mCOMMIT SUCCEEDED\033[0m\n"
fi

exit 0
